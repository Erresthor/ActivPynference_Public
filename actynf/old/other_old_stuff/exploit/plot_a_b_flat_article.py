#!/usr/bin/python
from json import load
import sys,inspect,os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.animation as animation

plt.rcParams["figure.figsize"] = [7.50, 3.50]
plt.rcParams["figure.autolayout"] = True
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.collections import PolyCollection


currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir) 

from pyai.base.file_toolbox import save_flexible,load_flexible
from pyai.layer.layer_learn import MemoryDecayType
from pyai.model.active_model import ActiveModel
from pyai.neurofeedback_run import evaluate_model_mean
from pyai.model.metrics import flexible_entropy,flexible_kl_dir
from pyai.base.function_toolbox import normalize

from pyai.models_neurofeedback.climb_stairs import nf_model,evaluate_container
from pyai.base.miscellaneous_toolbox import smooth_1D_array
import time as t

from i_animate import Player

# We grab a "performance_ouptut.pyai" file and extract the data :D
def load_perf(filepath):
    return (load_flexible(filepath))

def generate_grids(model_list,pick_t,parameter_index,size = (12,12),smooth_it = 0):
    Xgrid = np.zeros(size)
    Ygrid = np.zeros(size)
    Zgrid = np.zeros(size)
    for model in model_list :
        model_object = model[0]
        results_list = model[1]
        options = model_object.input_parameters
        index = tuple(model_object.index)
        #print(index)
        #print(options[1],options[4])
        Xgrid[index] = options[1]
        Ygrid[index] = options[4]
        Zgrid[index] = results_list[parameter_index][pick_t]
        if(smooth_it > 0):
            sum = 0
            cnt = 0
            for k in range(pick_t-smooth_it,pick_t + smooth_it + 1):
                try :
                    sum += results_list[parameter_index][k]
                    cnt += 1
                except :
                    sum += 0
                    cnt += 0
            Zgrid[index] = sum/cnt
    return Xgrid,Ygrid,Zgrid

def show_animation(file,im_interested_in,fps = 40):
    list_of_models = file
    n = len(list_of_models)
    max_x = 0
    max_y = 0
    for k in range(n):
        index = (file[k]['model'].index)
        if (index[0]>max_x):
            max_x = index[0]
        if(index[1]>max_y): 
            max_y = index[1]

    print(max_x,max_y)
    max_t = list_of_models[0]['mean']['perception_error'].shape[0]
    print(max_t)



    arrs = np.zeros((3,max_x+1,max_y+1,max_t))
    for k in range(n):
        model_sumup_file = file[k]
        index = model_sumup_file['model'].index
        a_error = model_sumup_file['model'].input_parameters[1]
        b_error = model_sumup_file['model'].input_parameters[4]
        interesting_quantity = model_sumup_file['mean'][im_interested_in]
        if (a_error=='perfect'):
            a_error = 5
        if (b_error=='perfect'):
            b_error = 5
        arrs[0,index[0],index[1],:] = a_error
        arrs[1,index[0],index[1],:] = b_error
        arrs[2,index[0],index[1],:] = interesting_quantity[:,0]
    
    

    def change_plot(frame_number, full_array, plot):
        plot[0].remove()
        #plot[0] = ax.plot_surface(x, y, zarray[:, :, frame_number], cmap="afmhot_r")
        plot[0] = ax.plot_surface(full_array[0,:,:,frame_number], full_array[1,:,:,frame_number], full_array[2,:,:,frame_number], cmap=cm.coolwarm,linewidth=0, antialiased=False)
    
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.set_xlabel('a variance')
    ax.set_ylabel('b variance')


    param_plot = im_interested_in
    if (param_plot=='a_error'):
        ax.set_zlabel('PERCEPTION MODEL error')
        ax.set_title('PERCEPTION MODEL error - KL(a,A)')
    elif  (param_plot==4):
        ax.set_zlabel('ACTION MODEL error')
        ax.set_title('ACTION MODEL error - KL(b,B)')
    elif  (param_plot==5):
        ax.set_title('PERCEPTION MODEL entropy - E(a)')
        ax.set_zlabel('PERCEPTION MODEL entropy')
    elif  (param_plot==6):
        ax.set_zlabel('ACTION MODEL entropy')
        ax.set_title('ACTION MODEL entropy - E(b)')
    elif  (param_plot==7):
        ax.set_zlabel('INITIAL STATE MODEL entropy')
        ax.set_title('INITIAL STATE MODEL entropy - E(d)')
    elif  (param_plot==8):
        ax.set_zlabel('state error')
        ax.set_title('TRUE STATE error - ||optimal,true||_s')
    elif  (param_plot==9):
        ax.set_zlabel('actions taken error')
        ax.set_title('TRUE ACTIONS TAKEN error - ||optimal,true||_u')
    elif  (param_plot==10):
        ax.set_zlabel('observations error')
        ax.set_title('TRUE OBSERVATIONS error - ||optimal,true||_o')
    elif  (param_plot==11):
        ax.set_zlabel('perception error')
        ax.set_title('TRUE PERCEPTION error - KL(s_estimated,s_true)')
    else : 
        ax.set_zlabel(param_plot)
    
    plot = [ax.plot_surface(arrs[0,:,:,0], arrs[1,:,:,0], arrs[2,:,:,0], color='0.75', rstride=1, cstride=1)]
    ax.set_zlim(0, 1.1)
    ani = animation.FuncAnimation(fig, change_plot, max_t, fargs=(arrs, plot), interval=1000 / fps)
    plt.show()


    #show_animation(file,im_interested_in)
def figure_at_t(file,t,im_interested_in):
    list_of_models = file
    n = len(list_of_models)
    max_x = 0
    max_y = 0
    for k in range(n):
        index = (file[k]['model'].index)
        if (index[0]>max_x):
            max_x = index[0]
        if(index[1]>max_y): 
            max_y = index[1]

    max_t = list_of_models[0]['mean']['perception_error'].shape[0]
    val_for_a = 4
    val_for_b = 4
    arrs = np.zeros((3,max_x+1,max_y+1,max_t))
    for k in range(n):
        model_sumup_file = file[k]
        index = model_sumup_file['model'].index
        a_error = model_sumup_file['model'].input_parameters[1]
        b_error = model_sumup_file['model'].input_parameters[4]
        interesting_quantity = model_sumup_file['mean'][im_interested_in]
        if (a_error=='perfect'):
            a_error = val_for_a
        else :
            a_error = float(a_error) - 1
        
        if (b_error=='perfect'):
            b_error = val_for_b
        else : 
            b_error = float(b_error)-1
        arrs[0,index[0],index[1],:] = float(a_error)
        arrs[1,index[0],index[1],:] = float(b_error)
        arrs[2,index[0],index[1],:] = interesting_quantity[:,0]
        # print("---------------------------------------------------")
        # print("A error : " + str(a_error) + " *** B error : " + str(b_error))
        # print(interesting_quantity[:,0])
        # input()

    perfect_line = np.argmax(arrs[0,:,0,0]) # This for a model = perfect
    perfect_column = np.argmax(arrs[1,0,:,0]) # This for b model = perfect

    performances_for_perfect_x = arrs[:,perfect_line,:,:]
    performances_for_perfect_y = arrs[:,:,perfect_column,:]
    # print(performances_for_perfect_y[0,:,0])

    # performances_for_perfect_y = performances_for_perfect_y[:, [16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],:]

    # print(performances_for_perfect_y[0,:,0])

    remove_perfect_line = np.delete(arrs,perfect_line,axis=1)
    remove_perfect_line = np.delete(remove_perfect_line,perfect_column,axis = 2)
    #print(remove_perfect_line.shape)

    # x = np.linspace(-3, 3, 256)
    # y = np.linspace(-3, 3, 256)
    # X, Y = np.meshgrid(x, y)
    # Z = np.exp(-(X ** 2 + Y ** 2))
    # u = np.exp(-(x ** 2))

    my_dpi = 199
    fig = plt.figure(figsize=(800/my_dpi, 800/my_dpi), dpi=my_dpi)
    ax = fig.add_subplot(111, projection='3d')
    ax.set_zlim3d(0, 1)
    
    R = 0.9
    G = 0.9
    B = 0.9
    A = 0.9
    ax.w_xaxis.set_pane_color((R,G,B,A))
    ax.w_yaxis.set_pane_color((R,G,B,A))
    ax.w_zaxis.set_pane_color((R,G,B,A))

    eps = 1e-16
    ax.axes.set_xlim3d(left=0.-eps, right=4+eps)
    ax.axes.set_ylim3d(bottom=0.-eps, top=4+eps) 
    ax.axes.set_zlim3d(bottom=0.-eps, top=1+eps) 
    



    #ax.fill_between(performances_for_perfect_x[1,:,t], performances_for_perfect_x[2,:,t])
    #ax.fill_between(performances_for_perfect_y[0,:,t], performances_for_perfect_x[2,:,t])
    
    verts_perfect_x = [list(zip(performances_for_perfect_x[1,:,t],performances_for_perfect_x[2,:,t]))]
    verts_perfect_x[0].insert(0,(0.0,0.0))
    poly_x = PolyCollection(verts_perfect_x,facecolors='green')
    poly_x.set_alpha(0.6)
    ax.add_collection3d(poly_x,zs=val_for_a,zdir='x')
    
    ax.plot(performances_for_perfect_x[1,:,t], performances_for_perfect_x[2,:,t], zs=val_for_a, zdir='x', lw = 2, color = 'green',label="Perfect perception model (k_a --> +oo)")
    ax.plot(performances_for_perfect_y[0,:,t], performances_for_perfect_y[2,:,t], zs=val_for_b, zdir='y', lw = 2., color = 'purple',label="Perfect action model (k_b --> +oo)")
    
    verts_perfect_y = [list(zip(performances_for_perfect_y[0,:,t],performances_for_perfect_y[2,:,t]))]
    verts_perfect_y[0].insert(0,(0.0,0.0))
    poly_y = PolyCollection(verts_perfect_y,facecolors='purple')
    poly_y.set_alpha(0.6)
    ax.add_collection3d(poly_y,zs=val_for_b,zdir='y')
    
    ax.plot_surface(remove_perfect_line[0,:,:,t], remove_perfect_line[1,:,:,t], remove_perfect_line[2,:,:,t], cmap=cm.coolwarm,linewidth=4, antialiased=False,alpha=0.95,vmin=0,vmax=1)
    ax.plot_wireframe(remove_perfect_line[0,:,:,t], remove_perfect_line[1,:,:,t], remove_perfect_line[2,:,:,t], rstride=40, cstride=40,color="black")
    
    ax.set_xlabel("k_a")
    ax.set_ylabel("k_b")
    ax.set_zlabel(im_interested_in)
    ax.set_title("Evolution of " + im_interested_in + " for varying subject perception / action priors")
    #ax.legend(loc="upper right")
    # ax.set_xlim(0.9,5)
    # ax.set_ylim(0.9,5)
    return fig,ax   

def save_arr(filename,overwrite=False,b_wanted=1):
    savefile = os.path.join(savepath,filename+"_quick"+str(b_wanted))
    if(not(os.path.exists(savefile)) or overwrite) :
        t0 = t.time()
        file = load_flexible(os.path.join(savepath,filename))
        t1 = t.time()
        print("Loading file " + filename + " in " + str(np.round(t1 - t0,2)) + " seconds .")
        NTrials = file[0]['mean']['state_error'].shape[0]
        NInstances = file[0]['complete']['state_error'].shape[0]

        total_models = 0
        list_of_models = file

        size = 0
        for model_recap in list_of_models :
            print(model_recap['model'].index)
            if model_recap['model'].index[0]>size:
                size = model_recap['model'].index[0]
            
        my_array = list(np.zeros((size+1,)))
        for model_recap in list_of_models :
            parameters = model_recap['model'].input_parameters
            a_prec = parameters[1]
            b_prec = parameters[4]
            # print(a_prec,b_prec)
            if (not(b_prec == 'perfect')):
                if (abs(float(b_prec)-b_wanted) < 1e-5): # Only start with unknown actions ! 
                    inx = model_recap['model'].index
                    print(inx)
                    my_array[inx[0]] = model_recap
        save_flexible(my_array,savefile)


if __name__=="__main__":
    
    transparency = 1
    b_value = 4.0
    overwrite=False

    savepath = os.path.join("C:",os.sep,"Users","annic","Desktop","Phd","cluster_results")
    filenames = ["simulation_output_001.pyai","simulation_output_1sham.pyai"]

    im_interested_in = "b_error"
    t0 = t.time()
    file = load_flexible(os.path.join(savepath,filenames[0]))
    t1 = t.time()
    print("Loading file " + filenames[0] + " in " + str(np.round(t1 - t0,2)) + " seconds .")
    
    t = 249
    # show_animation(file,)
    fig,ax = figure_at_t(file,t,"observation_error")
    for ii in range(0,360,1):
        ax.view_init(elev=35., azim=ii)
        plt.savefig(os.path.join(savepath,str(t),"000_trash","figure_"+str(ii)+".png"))

    fig,ax = figure_at_t(file,t,"a_error")
    for ii in range(0,360,1):
        ax.view_init(elev=35., azim=ii)
        plt.savefig(os.path.join(savepath,str(t),"001_trash","figure_"+str(ii)+".png"))

    fig,ax = figure_at_t(file,t,"b_error")
    for ii in range(0,360,1):
        ax.view_init(elev=35., azim=ii)
        plt.savefig(os.path.join(savepath,str(t),"002_trash","figure_"+str(ii)+".png"))


    # fig,axes = plt.subplots(2,3)
    # for column in range(3):
    #     savefile = os.path.join(savepath,filenames[column]+"_quick")
    #     arr = load_flexible(savefile)
    #     for mod in arr :
    #         NTrials = mod['mean']['state_error'].shape[0]
    #         NInstances = mod['complete']['state_error'].shape[0]

    #         a_prec = (mod['model'].input_parameters[1])
    #         print(a_prec)

    #         if(a_prec=="perfect"):
    #             color = np.array([0,0,0,1]) 
    #         else :
    #             t = (float(a_prec)/5.0)
    #             noisy = np.array([0.0,0.0,1.0,1]) 
    #             certain = np.array([1.0,0.0,0.0,1]) 
    #             color = certain + t*(noisy-certain)


    #         mod['mean']['a_error'][mod['mean']['a_error']>1] = 1
    #         mod['mean']['b_error'][mod['mean']['b_error']>1] = 1

    #         axes[0,column].plot(mod['mean']['a_error'],mod['mean']['b_error'],color=color)
    #         print(mod['mean']['a_error'],mod['mean']['b_error'])
            
            
    #         if(a_prec=="perfect"):
    #             color = np.array([0,0,0,1]) 
    #         else :
    #             t = (float(a_prec)/5.0)
    #             noisy = np.array([0.0,0.0,1.0,0.5]) 
    #             certain = np.array([1.0,0.0,0.0,0.5]) 
    #             color = certain + t*(noisy-certain)
    #         axes[1,column].scatter(mod['mean']['state_error'],mod['mean']['observation_error'],color=color)
    

    # axes[0,0].set_ylim([0.75,1.05])
    # axes[0,1].set_ylim([0.75,1.05])
    # axes[0,2].set_ylim([0.75,1.05])
    # axes[1,0].set_ylim([0.0,1.1])
    # axes[1,1].set_ylim([0.0,1.1])
    # axes[1,2].set_ylim([0.0,1.1])

    plt.show()
