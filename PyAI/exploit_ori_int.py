#!/usr/bin/python
from json import load
import sys,inspect,os
from tkinter import N
from unicodedata import mirrored
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.animation as animation
plt.rcParams["figure.figsize"] = [7.50, 3.50]
plt.rcParams["figure.autolayout"] = True
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.collections import PolyCollection
from operator import itemgetter

from pyai.base.file_toolbox import save_flexible,load_flexible
from pyai.layer.layer_learn import MemoryDecayType

from pyai.model.active_model import ActiveModel
from pyai.model.active_model_save_manager import ActiveSaveManager
from pyai.model.active_model_container import ActiveModelSaveContainer

from pyai.neurofeedback_run import evaluate_model_mean
from pyai.model.metrics import flexible_kl_dir
from pyai.base.function_toolbox import normalize
from pyai.base.file_toolbox import load_flexible,save_flexible
from pyai.models_neurofeedback.climb_stairs import nf_model,evaluate_container

from pyai.base.miscellaneous_toolbox import smooth_1D_array

import time as t

if __name__=="__main__":
    savepath = os.path.join("C:",os.sep,"Users","annic","Desktop","Phd","cluster_results","run_orientation_intensity_3")
    filenames = ["left","right"]

    
    totalpath = os.path.join(savepath,filenames[0])

    indx = 0
    list_to_order = []
    for file in os.listdir(totalpath):
        try : 
            b_str = float(file.split("_")[1])
            val = b_str
        except :
            b_str = file.split("_")[1]
            val = 999
        list_to_order.append([val,indx])
        model = ActiveModel.load_model(os.path.join(totalpath,file))
        indx = indx+1
    ordered_list = sorted(list_to_order, key=itemgetter(0))
    print(ordered_list)

    Ninst = 10 # Instance / side / set of initial parameters
    Ntrials = 100 # Number of trials
    NT = 10 # Number of timesteps
    Ndata = 10 # Number of monitored indicators, including the initial parameter
    Nmodels = len(ordered_list)
    Nsides = 2

    dictionnary_name = "dico_with_lists"

    overwrite = False
    if (os.path.exists(os.path.join(savepath,dictionnary_name))) and (not(overwrite)):
        save_dict = load_flexible(os.path.join(savepath,dictionnary_name))
    else : 
        initial_action_model_prec = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2,NT))
        state_array = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2,NT))
        obs_array = np.zeros((Nmodels,Nsides,Ninst,Ntrials,1,NT))
        action_array = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2,NT-1))
        percept_array_err = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2,NT))
        a_err = np.zeros((Nmodels,Nsides,Ninst,Ntrials))
        b_err = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2))
        A_list = []
        B_list = []
        model_cnt = 0
        for model_par in ordered_list:
            model_index = model_par[1]
            modelpathr = os.path.join(os.path.join(savepath,filenames[0]),os.listdir(totalpath)[model_index])
            modelpathl = os.path.join(os.path.join(savepath,filenames[1]),os.listdir(totalpath)[model_index])

            modelr = ActiveModel.load_model(modelpathr)
            modell = ActiveModel.load_model(modelpathl)
            A_list.append([modelr.a,modell.a])
            B_list.append([modelr.b,modell.b])
            inst_cnt = 0
            for instance in os.listdir(modelpathr):
                #print(model_index,instance)
                if(not("MODEL" in instance)):
                    instancer = os.path.join(modelpathr,instance)
                    trial_cnt = 0
                    for trialfilename in os.listdir(instancer):
                        cont = ActiveModelSaveContainer.load_active_model_container(os.path.join(instancer,trialfilename))
                        # Hidden arrays
                        state_array[model_cnt,0,inst_cnt,trial_cnt,:,:] = cont.s
                        obs_array[model_cnt,0,inst_cnt,trial_cnt,:,:] = cont.o
                        action_array[model_cnt,0,inst_cnt,trial_cnt,:,:] = cont.u
                        # True state dist :
                        for fac in range(len(cont.X)):
                            belief_abt_states = cont.X[fac]
                            true_dist = np.zeros((belief_abt_states.shape[0],NT))
                            for t in range(NT):                    
                                true_dist[int(cont.s[fac,t]),t]=1
                            perception_error = flexible_kl_dir(belief_abt_states,true_dist,option='centered')
                            
                            percept_array_err[model_cnt,0,inst_cnt,trial_cnt,fac,:] = perception_error
                            #print(flexible_kl_dir(normalize(cont.a_),cont.A_,option='centered'))
                            a_err[model_cnt,0,inst_cnt,trial_cnt] = flexible_kl_dir(normalize(cont.a_),normalize(cont.A_),option='centered')[0]
                            b_err[model_cnt,0,inst_cnt,trial_cnt] = flexible_kl_dir(normalize(cont.b_),normalize(cont.B_),option='centered')

                            # if (model_index == 30)or(model_index==20):
                            #     if (fac==0)and (trial_cnt==0)and(inst_cnt==0):
                            #         print(str(model_index) + " --> " + str(trialfilename) + " / " + str(Ntrials))
                            #         print("input parameter = " + str ())
                            #         print(normalize(cont.b_)[0][:,:,0])
                            #         print("----------")
                            #         print(normalize(cont.B_)[0][:,:,0])
                            #         print("=")
                            #         print(flexible_kl_dir(normalize(cont.b_),normalize(cont.B_),option='centered'))
                            #         print("####################################################")
                        trial_cnt = trial_cnt + 1
                    inst_cnt = inst_cnt + 1
            inst_cnt = 0
            for instance in os.listdir(modelpathl):
                #print(model_index,instance)
                if(not("MODEL" in instance)):
                    instancer = os.path.join(modelpathl,instance)
                    trial_cnt = 0
                    for trialfilename in os.listdir(instancer):
                        cont = ActiveModelSaveContainer.load_active_model_container(os.path.join(instancer,trialfilename))
                        # Hidden arrays
                        state_array[model_cnt,1,inst_cnt,trial_cnt,:,:] = cont.s
                        obs_array[model_cnt,1,inst_cnt,trial_cnt,:,:] = cont.o
                        action_array[model_cnt,1,inst_cnt,trial_cnt,:,:] = cont.u
                        # True state dist :
                        for fac in range(len(cont.X)):
                            belief_abt_states = cont.X[fac]
                            true_dist = np.zeros((belief_abt_states.shape[0],NT))
                            for t in range(NT):                    
                                true_dist[int(cont.s[fac,t]),t]=1
                            perception_error = flexible_kl_dir(belief_abt_states,true_dist,option='centered')
                            
                            percept_array_err[model_cnt,0,inst_cnt,trial_cnt,fac,:] = perception_error
                            #print(flexible_kl_dir(normalize(cont.a_),cont.A_,option='centered'))
                            a_err[model_cnt,1,inst_cnt,trial_cnt] = flexible_kl_dir(normalize(cont.a_),normalize(cont.A_),option='centered')[0]
                            b_err[model_cnt,1,inst_cnt,trial_cnt] = flexible_kl_dir(normalize(cont.b_),normalize(cont.B_),option='centered')

                            # if (model_index == 30)or(model_index==20):
                            #     if (fac==0)and (trial_cnt==0)and(inst_cnt==0):
                            #         print(str(model_index) + " --> " + str(trialfilename) + " / " + str(Ntrials))
                            #         print("input parameter = " + str ())
                            #         print(normalize(cont.b_)[0][:,:,0])
                            #         print("----------")
                            #         print(normalize(cont.B_)[0][:,:,0])
                            #         print("=")
                            #         print(flexible_kl_dir(normalize(cont.b_),normalize(cont.B_),option='centered'))
                            #         print("####################################################")
                        trial_cnt = trial_cnt + 1
                    inst_cnt = inst_cnt + 1
            model_cnt = model_cnt + 1
        
        
        model_cnt = model_cnt + 1



        #b_err = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2))
        save_dict = {
            "states":state_array,
            "obs" : obs_array,
            "actions":action_array,
            "a_err" : a_err,
            "b_err" : b_err,
            "per_err" : percept_array_err,
            "alist" : A_list,
            "blist" : B_list
        }
        save_flexible(save_dict,os.path.join(savepath,dictionnary_name))
    




    # FIGURE 1 : HOW VARIOUS ATTENTIONAL ACTION PRIORS AFFECT PERFORMANCES
    colmin = np.array([0,0,1,1])
    colmax = np.array([[1,0,0,1]])
    fig,axes  = plt.subplots(2,2)
    for model in range(len(ordered_list)):
        if (float(model)==len(ordered_list)-1):
            col = np.array([0,1,0,1])
        else :
            
            t = ordered_list[model][0]/20.5
            print(ordered_list[model][0],t)
            col = colmin + t*(colmax-colmin)

        
        if (model%4==0)or(model==(len(ordered_list)-1)):
            label = str(ordered_list[model][0])
            b_err_mean = np.average(save_dict["b_err"][model,0,:,:,:],0)
            a_err_mean = np.average(save_dict["a_err"][model,0,:,:],0)
            s_mean = np.average(save_dict["states"][model,0,:,:,0,:],(0,2))
            o_mean = np.average(save_dict["obs"][model,0,:,:,0,:],(0,2))
            #s_error_mean = np.average(s_error_mean,1)

            axes[0,0].plot(np.linspace(0,Ntrials,Ntrials),b_err_mean[...,0],color=col)
            axes[0,0].set_title("Action model error")

            axes[0,1].plot(np.linspace(0,Ntrials,Ntrials),a_err_mean,color=col,label=label)
            axes[0,1].set_title("Perception model error")

            axes[1,0].plot(np.linspace(0,Ntrials,Ntrials),s_mean,color=col)
            axes[1,0].set_title("Trial state error")

            axes[1,1].plot(np.linspace(0,Ntrials,Ntrials),o_mean,color=col)
            axes[1,1].set_title("Trial observation error")
            #plt.plot(b_err_mean)
    fig.legend()





    oldblue = np.array([0,0,1,0.2])
    oldred = np.array([1,0,0,0.2])
    newblue = np.array([0,0,1,0.8])
    newred = np.array([1,0,0,0.8])

    # FIGURE 2 : HOW LEFT AND RIGHT GROUP COMPARE DEPENDING ON THE INITIAL PRIOR
    
    interesting_b_prec = [1,10,20,30,35,len(ordered_list)-1]
    fig2,axes  = plt.subplots(5,len(interesting_b_prec))

    column_counter = 0
    for model_ind in interesting_b_prec:
        b_prec = ordered_list[model_ind][0]
        if (model_ind == len(ordered_list)-1 ) :
            b_prec = "Perfect"
        elif (model_ind == 0 ): 
            b_prec = "Unknown"
        s_mean_r = (np.average(save_dict["states"][model_ind,0,:,:,0,:],(0,2))-2)/2
        s_mean_l = (np.average(save_dict["states"][model_ind,1,:,:,0,:],(0,2))-2)/2
        o_mean_r = (np.average(save_dict["obs"][model_ind,0,:,:,0,:],(0,2))-2)/2
        o_mean_l = (np.average(save_dict["obs"][model_ind,1,:,:,0,:],(0,2))-2)/2

        b_err_mean_r = np.average(save_dict["b_err"][model_ind,0,:,:,:],0)
        b_err_mean_l = np.average(save_dict["b_err"][model_ind,1,:,:,:],0)

        a_err_mean_r = np.average(save_dict["a_err"][model_ind,0,:,:],0)
        a_err_mean_l = np.average(save_dict["a_err"][model_ind,1,:,:],0)

        print(save_dict["blist"][model_ind][0][0][:,:,0])

        concat_1 = normalize(save_dict["blist"][model_ind][0][0])[:,:,0]
        concat_2 = normalize(save_dict["blist"][model_ind][0][0])[:,:,1]
        concat_3 = normalize(save_dict["blist"][model_ind][0][0])[:,:,2]
        conc = np.concatenate([concat_1,concat_2],1)

        axes[0,column_counter].imshow(conc,vmin=0,vmax=1)
        axes[0,column_counter].axis("off")

        axes[1,column_counter].plot(np.linspace(0,Ntrials,Ntrials),s_mean_r,color="blue")
        axes[1,column_counter].plot(np.linspace(0,Ntrials,Ntrials),s_mean_l,color="red")
        axes[1,column_counter].fill_between(np.linspace(0,Ntrials,Ntrials),np.zeros((Ntrials,)),s_mean_r,color=oldblue)
        axes[1,column_counter].fill_between(np.linspace(0,Ntrials,Ntrials),np.zeros((Ntrials,)),s_mean_l,color=oldred)
        axes[1,column_counter].set_ylim([-1,1])
        axes[1,column_counter].set_title(str(b_prec))
        axes[1,column_counter].axhline(0,color="black")
        axes[1,column_counter].grid()

        axes[2,column_counter].plot(np.linspace(0,Ntrials,Ntrials),o_mean_r,color="blue")
        axes[2,column_counter].plot(np.linspace(0,Ntrials,Ntrials),o_mean_l,color="red")
        axes[2,column_counter].fill_between(np.linspace(0,Ntrials,Ntrials),0.*np.ones((Ntrials,)),o_mean_r,color=oldblue)
        axes[2,column_counter].fill_between(np.linspace(0,Ntrials,Ntrials),0.*np.ones((Ntrials,)),o_mean_l,color=oldred)
        axes[2,column_counter].set_ylim([0,1])
        axes[2,column_counter].axhline(0.0,color="black")
        axes[2,column_counter].grid()

        axes[3,column_counter].plot(np.linspace(0,Ntrials,Ntrials),a_err_mean_r,color="blue")
        axes[3,column_counter].plot(np.linspace(0,Ntrials,Ntrials),a_err_mean_l,color="red")       
        axes[3,column_counter].set_ylim([-0.1,1.1])
        axes[3,column_counter].grid()

        axes[4,column_counter].plot(np.linspace(0,Ntrials,Ntrials),b_err_mean_r,color="blue")
        axes[4,column_counter].plot(np.linspace(0,Ntrials,Ntrials),b_err_mean_l,color="red")
        axes[4,column_counter].set_ylim([-0.1,1.1])
        axes[4,column_counter].set_xlabel("Trials")
        axes[4,column_counter].grid()
        column_counter = column_counter + 1
    fig.legend()



    
    # FIGURE 3 : HOW LEFT AND RIGHT GROUP COMPARE DEPENDING ON THE INITIAL PRIOR, TIMESTEPS
    fig3,axes  = plt.subplots(3,len(interesting_b_prec))
    axes[0,0].set_ylabel("Orientation state")
    axes[1,0].set_ylabel("Feedback level")
    column_counter = 0
    for model_ind in interesting_b_prec:
        b_prec = ordered_list[model_ind][0]
        if (model_ind == len(ordered_list)-1 ) :
            b_prec = "Perfect"
        elif (model_ind == 0 ): 
            b_prec = "Unknown"
        
        s_mean_r25 = (np.average(save_dict["states"][model_ind,0,:,:25,0,:],(0,1))-2)/2
        s_mean_l25 = (np.average(save_dict["states"][model_ind,1,:,:25,0,:],(0,1))-2)/2
        o_mean_r25 = (np.average(save_dict["obs"][model_ind,0,:,:25,0,:],(0,1))-2)/2
        o_mean_l25 = (np.average(save_dict["obs"][model_ind,1,:,:25,0,:],(0,1))-2)/2

        s_mean_r75 = (np.average(save_dict["states"][model_ind,0,:,74:,0,:],(0,1))-2)/2
        s_mean_l75 = (np.average(save_dict["states"][model_ind,1,:,74:,0,:],(0,1))-2)/2
        o_mean_r75 = (np.average(save_dict["obs"][model_ind,0,:,74:,0,:],(0,1))-2)/2
        o_mean_l75 = (np.average(save_dict["obs"][model_ind,1,:,74:,0,:],(0,1))-2)/2

        
        concat_1 = normalize(save_dict["blist"][model_ind][0][0])[:,:,0]
        concat_2 = normalize(save_dict["blist"][model_ind][0][0])[:,:,1]
        concat_3 = normalize(save_dict["blist"][model_ind][0][0])[:,:,2]
        conc = np.concatenate([concat_1,concat_2],1)
        axes[0,column_counter].imshow(conc,vmin=0,vmax=1)
        axes[0,column_counter].axis("off")

        axes[1,column_counter].plot(np.linspace(0,NT,NT),s_mean_r25,color=oldblue)
        axes[1,column_counter].plot(np.linspace(0,NT,NT),s_mean_l25,color=oldred)
        axes[1,column_counter].plot(np.linspace(0,NT,NT),s_mean_r75,color=newblue)
        axes[1,column_counter].plot(np.linspace(0,NT,NT),s_mean_l75,color=newred)
        axes[1,column_counter].set_ylim([-1,1])
        axes[1,column_counter].set_title(str(b_prec))
        axes[1,column_counter].axhline(0,color="black")
        axes[1,column_counter].grid()

        axes[2,column_counter].plot(np.linspace(0,NT,NT),o_mean_r25,color=oldblue)
        axes[2,column_counter].plot(np.linspace(0,NT,NT),o_mean_l25,color=oldred)
        axes[2,column_counter].plot(np.linspace(0,NT,NT),o_mean_r75,color=newblue)
        axes[2,column_counter].plot(np.linspace(0,NT,NT),o_mean_l75,color=newred)
        axes[2,column_counter].set_ylim([0,1])
        axes[2,column_counter].axhline(0,color="black")
        axes[2,column_counter].grid()
        axes[2,column_counter].set_xlabel("Timesteps")
        column_counter = column_counter + 1
    plt.show()