#!/usr/bin/python
from json import load
import sys,inspect,os
from tkinter import N
from unicodedata import mirrored
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.animation as animation
plt.rcParams["figure.figsize"] = [7.50, 3.50]
plt.rcParams["figure.autolayout"] = True
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.collections import PolyCollection
from operator import itemgetter


# currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
# parentdir = os.path.dirname(currentdir)
# sys.path.insert(0, parentdir) 

from pyai.base.file_toolbox import save_flexible,load_flexible
from pyai.layer.layer_learn import MemoryDecayType

from pyai.model.active_model import ActiveModel
from pyai.model.active_model_save_manager import ActiveSaveManager
from pyai.model.active_model_container import ActiveModelSaveContainer

from pyai.neurofeedback_run import evaluate_model_mean
from pyai.model.metrics import flexible_kl_dir
from pyai.base.function_toolbox import normalize
from pyai.base.file_toolbox import load_flexible,save_flexible
from pyai.models_neurofeedback.climb_stairs import nf_model,evaluate_container

from pyai.base.miscellaneous_toolbox import smooth_1D_array

import time as t

if __name__=="__main__":
    savepath = os.path.join("C:",os.sep,"Users","annic","Desktop","Phd","cluster_results","run_orientation_intensity_2")
    filenames = ["left","right"]

    
    totalpath = os.path.join(savepath,filenames[0])

    indx = 0
    list_to_order = []
    for file in os.listdir(totalpath):
        try : 
            b_str = float(file.split("_")[1])
            val = b_str
        except :
            b_str = file.split("_")[1]
            val = 999
        list_to_order.append([val,indx])
        model = ActiveModel.load_model(os.path.join(totalpath,file))
        print(val,indx)
        print((normalize(model.b[0])[:,:,3]))
        print("----------------------")
        indx = indx+1
    print(list_to_order)
    ordered_list = sorted(list_to_order, key=itemgetter(0))
    print(ordered_list)
    #print(ordered_list)

    Ninst = 10 # Instance / side / set of initial parameters
    Ntrials = 100 # Number of trials
    NT = 10 # Number of timesteps
    Ndata = 10 # Number of monitored indicators, including the initial parameter
    Nmodels = len(ordered_list)
    Nsides = 2


    overwrite = False
    if (os.path.exists(os.path.join(savepath,"dico"))) and (not(overwrite)):
        save_dict = load_flexible(os.path.join(savepath,"dico"))
    else : 
        state_array = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2,NT))
        obs_array = np.zeros((Nmodels,Nsides,Ninst,Ntrials,1,NT))
        action_array = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2,NT-1))
        percept_array_err = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2,NT))
        a_err = np.zeros((Nmodels,Nsides,Ninst,Ntrials))
        b_err = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2))

        for model_par in ordered_list:
            model_index = model_par[1]

            modelpathr = os.path.join(os.path.join(savepath,filenames[0]),os.listdir(totalpath)[model_index])
            modelpathl = os.path.join(os.path.join(savepath,filenames[1]),os.listdir(totalpath)[model_index])

            modelr = ActiveModel.load_model(modelpathr)
            modell = ActiveModel.load_model(modelpathl)

            inst_cnt = 0
            for instance in os.listdir(modelpathr):
                print(model_index,instance)
                if(not("MODEL" in instance)):
                    instancer = os.path.join(modelpathr,instance)
                    trial_cnt = 0
                    for trialfilename in os.listdir(instancer):
                        cont = ActiveModelSaveContainer.load_active_model_container(os.path.join(instancer,trialfilename))
                        # Hidden arrays
                        state_array[model_index,0,inst_cnt,trial_cnt,:,:] = cont.s
                        obs_array[model_index,0,inst_cnt,trial_cnt,:,:] = cont.o
                        action_array[model_index,0,inst_cnt,trial_cnt,:,:] = cont.u
                        # True state dist :
                        for fac in range(len(cont.X)):
                            belief_abt_states = cont.X[fac]
                            true_dist = np.zeros((belief_abt_states.shape[0],NT))
                            for t in range(NT):                    
                                true_dist[int(cont.s[fac,t]),t]=1
                            perception_error = flexible_kl_dir(belief_abt_states,true_dist,option='centered')
                            
                            percept_array_err[model_index,0,inst_cnt,trial_cnt,fac,:] = perception_error
                            #print(flexible_kl_dir(normalize(cont.a_),cont.A_,option='centered'))
                            a_err[model_index,0,inst_cnt,trial_cnt] = flexible_kl_dir(normalize(cont.a_),normalize(cont.A_),option='centered')[0]
                            b_err[model_index,0,inst_cnt,trial_cnt] = flexible_kl_dir(normalize(cont.b_),normalize(cont.B_),option='centered')
                        trial_cnt = trial_cnt + 1
                    inst_cnt = inst_cnt + 1

        #b_err = np.zeros((Nmodels,Nsides,Ninst,Ntrials,2))
        save_dict = {
            "states":state_array,
            "obs" : obs_array,
            "actions":action_array,
            "a_err" : a_err,
            "b_err" : b_err,
            "per_err" : percept_array_err
        }
        save_flexible(save_dict,os.path.join(savepath,"dico"))
    
    colmin = np.array([0,0,1,1])
    colmax = np.array([[1,0,0,1]])
    fig,axes  = plt.subplots(2,2)
    for model in range(len(ordered_list)):
        if (float(model)==len(ordered_list)-1):
            col = np.array([0,1,0,1])
        else :
            t = (float(model)/float(len(ordered_list)-2))
            col = colmin + t*(colmax-colmin)

        
        if (model%2==0)or(model==(len(ordered_list)-1)):
            label = str(ordered_list[model][0])
            b_err_mean = np.average(save_dict["b_err"][model,0,:,:,:],0)
            a_err_mean = np.average(save_dict["a_err"][model,0,:,:],0)
            s_mean = np.average(save_dict["states"][model,0,:,:,0,:],(0,2))
            o_mean = np.average(save_dict["obs"][model,0,:,:,0,:],(0,2))
            #s_error_mean = np.average(s_error_mean,1)

            axes[0,0].plot(np.linspace(0,Ntrials,Ntrials),b_err_mean[...,0],color=col)
            axes[0,1].plot(np.linspace(0,Ntrials,Ntrials),a_err_mean,color=col,label=label)
            axes[1,0].plot(np.linspace(0,Ntrials,Ntrials),s_mean,color=col)
            axes[1,1].plot(np.linspace(0,Ntrials,Ntrials),o_mean,color=col)
            #plt.plot(b_err_mean)
    fig.legend()
    #plt.show()