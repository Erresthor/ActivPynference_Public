import numpy as np
import statistics as stat
import scipy.stats as scistats
import math,sys,os,inspect
import pickle 
import matplotlib.pyplot as plt

import actynf
from tools import dist_kl_dir,js_dir # A tool to qualify subject learning

#!/usr/bin/python
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir) 
  
def extract_training_data(savepath):
    # EXTRACT TRAINING CURVES    
    with open(savepath, 'rb') as handle:
        saved_data = pickle.load(handle)
    stms = saved_data["stms"]
    weights = saved_data["matrices"]

    Nsubj = len(stms)
    Ntrials = len(weights[0])-1 # One off because we save the initial weights (= trial 0)
    return stms,weights,Nsubj,Ntrials

def initialize_list_of_list(Ns,Ny):
    z = []
    for x in range(Ns):
        z.append([])
        for y in range(Ny):
            z[-1].append(None)
    return z

def save_object_to(obj,savepath,override=True):
    if not os.path.exists(os.path.dirname(savepath)):
        os.makedirs(os.path.dirname(savepath))

    exists = os.path.isfile(savepath)
    if (not(exists)) or (override):
        print("Saving to " + savepath)
            
        with open(savepath, 'wb') as handle:
            pickle.dump(obj, handle, protocol=pickle.HIGHEST_PROTOCOL)
        print("Saved to :   " + savepath)


def save_performances():
    """
    Change the format of the save
    """
    save_folder_name = os.path.join(os.path.abspath(os.sep),"mnt","data","Come_A","graz","results","000")
    all_files = [os.path.join(save_folder_name, f) for f in os.listdir(save_folder_name) if os.path.isfile(os.path.join(save_folder_name, f))]
    
    K = 21
    simulation_min_value = 0.00001
    simulation_max_value = 2.0

    key_array = initialize_list_of_list(K,K)
    results_feedbacks = initialize_list_of_list(K,K)
    results_states = initialize_list_of_list(K,K)
    results_a = initialize_list_of_list(K,K)
    results_b = initialize_list_of_list(K,K)
    # true_a = initialize_list_of_list(K,K)
    # true_b = initialize_list_of_list(K,K)

    Nfiles = len(all_files)
    for k,file in enumerate(all_files):

        filename = os.path.basename(file)
        print(str(k) + "  / " + str(Nfiles) + "  -- "  +filename)
        
        param_val = filename.split("_")
        
        value_1 = float(param_val[-3])  # B_inten
        value_2 = float(param_val[-2])  # B_ori
        
        b_i = (int(K*(value_1-simulation_min_value)/simulation_max_value))
        b_alpha = (int(K*(value_2-simulation_min_value)/simulation_max_value))

        parameter_values = np.array([value_1,value_2])
        key_array[b_i][b_alpha] = parameter_values
                
        _stm,_weight,_Nsubj,_Ntrials  = extract_training_data(file)

        feedback_perfs = [[_stm[subj][idx][0].o for idx in range(1,_Ntrials+1)] for subj in range(_Nsubj)]
        feedback_perfs_array = np.array(feedback_perfs)
        results_feedbacks[b_i][b_alpha] = feedback_perfs_array

        state_perfs = [[_stm[subj][idx][0].x for idx in range(1,_Ntrials+1)] for subj in range(_Nsubj)]
        state_perfs_array = np.array(state_perfs)
        results_states[b_i][b_alpha] = state_perfs_array

        true_A = _weight[0][0][0]["a"][0]
        # true_a.append(true_A)

        # a_dists =  [[dist_kl_dir(_weight[subj][trial][1]["a"][0],true_A) for trial in range(1,_Ntrials+1)] for subj in range(_Nsubj)]
        a_dists =  [[dist_kl_dir(_weight[subj][trial][1]["a"][0],true_A) for trial in range(1+1,_Ntrials+1,2)] for subj in range(_Nsubj)]
        a_dists_array = np.array(a_dists)
        results_a[b_i][b_alpha] = a_dists_array
        # a_arrays = [[_weight[subj][trial][1]["a"][0] for trial in range(1+1,_Ntrials+1,2)] for subj in range(_Nsubj)]
        
        
        true_B = _weight[0][0][0]["b"]
        # true_b.append(_weight[0][0][0]["b"])

        # b_arrays = [[_weight[subj][trial][1]["b"][0] for trial in range(1,_Ntrials,2)] for subj in range(_Nsubj)]
        # results_b[b_i][b_alpha] = b_arrays
        b_dists = [[dist_kl_dir(_weight[subj][trial][1]["b"],true_B,return_scalar=False) for trial in range(1,_Ntrials+1)] for subj in range(_Nsubj)]
        b_dists_array = np.array(b_dists)
        results_b[b_i][b_alpha] = b_dists_array


    save_folder_name_arrayed = os.path.join(save_folder_name,"compressed")
    
    key_array = np.array(key_array) # array of size K x K x Kw x 3
    save_object_to(key_array,os.path.join(save_folder_name_arrayed,"KEYS"))
    subject_performances = {
        "s":np.array(results_states),
        "o":np.array(results_feedbacks),
        "a":np.array(results_a),
        "b":np.array(results_b)
    }
    save_object_to(subject_performances,os.path.join(save_folder_name_arrayed,"PERFS_small"))

if __name__ == "__main__":
    save_performances()