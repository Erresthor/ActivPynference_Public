#!/usr/bin/python
from audioop import mul
from json import load
import sys,inspect,os
import time as t
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.animation as animation
plt.rcParams["figure.figsize"] = [7.50, 3.50]
plt.rcParams["figure.autolayout"] = True

currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0, parentdir) 

from pyai.base.file_toolbox import save_flexible,load_flexible
from pyai.layer.layer_learn import MemoryDecayType
from pyai.model.active_model import ActiveModel
from pyai.neurofeedback_run import evaluate_model_mean
from pyai.models_neurofeedback.climb_stairs import nf_model,evaluate_container
from pyai.base.plotting_toolbox import multi_matrix_plot

from pyai.base.function_toolbox import normalize
# We grab a "performance_ouptut.pyai" file and extract the data :D
def load_perf(filepath):
    return (load_flexible(filepath))

def generate_grids(model_list,pick_t,parameter_index,size = (12,12),smooth_it = 0):
    Xgrid = np.zeros(size)
    Ygrid = np.zeros(size)
    Zgrid = np.zeros(size)
    for model in model_list :
        model_object = model[0]
        results_list = model[1]
        options = model_object.input_parameters
        index = tuple(model_object.index)
        #print(index)
        #print(options[1],options[4])
        Xgrid[index] = options[1]
        Ygrid[index] = options[4]
        Zgrid[index] = results_list[parameter_index][pick_t]
        if(smooth_it > 0):
            sum = 0
            cnt = 0
            for k in range(pick_t-smooth_it,pick_t + smooth_it + 1):
                if (k>=0):
                    try :
                        sum += results_list[parameter_index][k]
                        cnt += 1
                    except :
                        sum += 0
                        cnt += 0
            Zgrid[index] = sum/cnt
    return Xgrid,Ygrid,Zgrid

def plot_3D_animation(loaded_list,param_plot,xlabel='a_variance',ylabel='b_variance') :
    size = (21,21)
    N = 50
    fps = 30
    frn = 250

    z_array = np.zeros(size+(frn,))
    for t in range(frn):
        smooth_it = 0
        if (param_plot==8) or (param_plot==9) or (param_plot==10) or (param_plot==11):
            smooth_it = 15
        x,y,z = generate_grids(loaded_list,t,param_plot,size=size,smooth_it=smooth_it)
        z_array[:,:,t] = z
    
    # limit = 999
    # x = x[:limit,:limit]
    # y = y[:limit,:limit]
    # z_array = z_array[:limit,:limit]

    def change_plot(frame_number, zarray, plot):
        plot[0].remove()
        #plot[0] = ax.plot_surface(x, y, zarray[:, :, frame_number], cmap="afmhot_r")
        plot[0] = ax.plot_surface(x, y, zarray[:, :, frame_number], cmap=cm.coolwarm,linewidth=0, antialiased=False)
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.set_xlabel(xlabel)
    ax.set_ylabel(ylabel)

    if (param_plot==3):
        ax.set_zlabel('PERCEPTION MODEL error')
        ax.set_title('PERCEPTION MODEL error - KL(a,A)')
    elif  (param_plot==4):
        ax.set_zlabel('ACTION MODEL error')
        ax.set_title('ACTION MODEL error - KL(b,B)')
    elif  (param_plot==5):
        ax.set_title('PERCEPTION MODEL entropy - E(a)')
        ax.set_zlabel('PERCEPTION MODEL entropy')
    elif  (param_plot==6):
        ax.set_zlabel('ACTION MODEL entropy')
        ax.set_title('ACTION MODEL entropy - E(b)')
    elif  (param_plot==7):
        ax.set_zlabel('INITIAL STATE MODEL entropy')
        ax.set_title('INITIAL STATE MODEL entropy - E(d)')
    elif  (param_plot==8):
        ax.set_zlabel('state error')
        ax.set_title('TRUE STATE error - ||optimal,true||_s')
    elif  (param_plot==9):
        ax.set_zlabel('actions taken error')
        ax.set_title('TRUE ACTIONS TAKEN error - ||optimal,true||_u')
    elif  (param_plot==10):
        ax.set_zlabel('observations error')
        ax.set_title('TRUE OBSERVATIONS error - ||optimal,true||_o')
    elif  (param_plot==11):
        ax.set_zlabel('perception error')
        ax.set_title('TRUE PERCEPTION error - KL(s_estimated,s_true)')

    plot = [ax.plot_surface(x, y, z_array[:, :, 0], color='0.75', rstride=1, cstride=1)]
    ax.set_zlim(0, 1.1)
    ani = animation.FuncAnimation(fig, change_plot, frn, fargs=(z_array, plot), interval=1000 / fps)
    plt.show()


#def plot_2D_time_perf(xs,ys):


if __name__=="__main__":
    savepath = os.path.join("C:",os.sep,"Users","annic","Desktop","Phd","code","results","article_1")
    filename = "simulation_output_001.pyai"
    t0 = t.time()
    big_list = load_perf(os.path.join(savepath,filename))
    timefloat = (t.time()-t0)
    format_float = "{:.2f}".format(timefloat)
    print("Loaded performance file in " + format_float + " seconds.")

    save_path_2 = os.path.join("C:",os.sep,"Users","annic","Desktop","Phd","TEMPORARY_TEST_BED")
    model_name_2 = "learn_b_a_known"
    filename = "_PERFORMANCES_MEAN"
    sumup_mean_file = load_flexible(os.path.join(save_path_2,model_name_2,filename))

    size = (16,16)
    param_plot = 10
    N = 50
    fps = 30
    frn = 500
    # model_indice = 55
    # timestamp = 0
    # t2 = 200
    # a_matrix_1 = big_list[model_indice][1][0][timestamp][0]
    # b_matrix_1 = big_list[model_indice][1][1][timestamp][0]
    # a_mat_2 = big_list[model_indice][1][0][t2][0]
    # b_mat_2 = big_list[model_indice][1][1][t2][0]
    # print(a_mat_2.shape)
    # multi_matrix_plot([normalize(b_matrix_1),normalize(b_mat_2)],["b "+str(timestamp),"b "+str(t2)])
    # multi_matrix_plot([normalize(a_matrix_1),normalize(a_mat_2)],["a "+str(timestamp),"a "+str(t2)])
    # plt.show()
    

    z_array = np.zeros(size+(frn,))
    zns = np.zeros(size+(frn,))
    for t in range(frn):
        smooth_it = 0
        if (param_plot==8) or (param_plot==9) or (param_plot==10) or (param_plot==11):
            smooth_it = 3
        x,y,z = generate_grids(big_list,t,param_plot,size=size,smooth_it=smooth_it)
        x,y,z_not_smoothed = generate_grids(big_list,t,param_plot,size=size,smooth_it=0)
        z_array[:,:,t] = z
        zns[:,:,t] = z_not_smoothed
    
    variable_x_indexes = [0,5,10,15]    # Prior a : weak -> strong
    variable_y_indexes = [15]           # Prior b : strong
    variable_y_indexes = [0]           # Prior b : weak

    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.set_xlabel("Trials")
    if (param_plot==3):
        ax.set_ylabel('PERCEPTION MODEL error')
        ax.set_title('PERCEPTION MODEL error - KL(a,A)')
    elif  (param_plot==4):
        ax.set_ylabel('ACTION MODEL error')
        ax.set_title('ACTION MODEL error - KL(b,B)')
    elif  (param_plot==5):
        ax.set_title('PERCEPTION MODEL entropy - E(a)')
        ax.set_ylabel('PERCEPTION MODEL entropy')
    elif  (param_plot==6):
        ax.set_ylabel('ACTION MODEL entropy')
        ax.set_title('ACTION MODEL entropy - E(b)')
    elif  (param_plot==7):
        ax.set_ylabel('INITIAL STATE MODEL entropy')
        ax.set_title('INITIAL STATE MODEL entropy - E(d)')
    elif  (param_plot==8):
        ax.set_ylabel('state error')
        ax.set_title('TRUE STATE error - ||optimal,true||_s')
    elif  (param_plot==9):
        ax.set_ylabel('actions taken error')
        ax.set_title('TRUE ACTIONS TAKEN error - ||optimal,true||_u')
    elif  (param_plot==10):
        ax.set_ylabel('observations error')
        ax.set_title('TRUE OBSERVATIONS error - ||optimal,true||_o')
    elif  (param_plot==11):
        ax.set_ylabel('perception error')
        ax.set_title('TRUE PERCEPTION error - KL(s_estimated,s_true)')

    ts = np.arange(0,frn,1)

    initcolor = np.array([0.2,0.2,1.0])
    endcolor = np.array([1.0,0.2,0.2])
    cntr = 0
    for vary_x_ind in variable_x_indexes:
        for vary_y_ind in variable_y_indexes :
            x_val = x[vary_x_ind,vary_y_ind]
            y_val = y[vary_x_ind,vary_y_ind]
            z_arr = z_array[vary_x_ind,vary_y_ind,:]
            z_smoothed = zns[vary_x_ind,vary_y_ind,:] 
            print(z_arr)
            factor = float(cntr/5)
            colr = initcolor*(1-factor) + endcolor*factor
            ax.plot(ts,z_arr,label=str(x_val) + "-" + str(y_val),color=colr)
            ax.scatter(ts,z_smoothed,s=1,color=colr)
            cntr = cntr + 1
    
    obs_err = sumup_mean_file['observation_error']
    ax.plot(ts,obs_err,label='absolute confidence',color=endcolor)
    ax.scatter(ts,obs_err,s=1)
    print(obs_err)

    #plt.legend()
    plt.show()